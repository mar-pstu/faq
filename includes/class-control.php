<?php


namespace pstu_faq;


if ( ! defined( 'ABSPATH' ) ) {	exit; };


class Control {


	/**
	 * –ò–º—è –ø–ª–∞–≥–∏–Ω–∞ –∏ —Å–ª–∞–≥ –º–µ—Ç–∞–ø–æ–ª–µ–π
	 *
	 * @since    1.0.0
	 * @access   private
	 * @var      string    $plugin_name    –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫—Ç–æ—Ä –ø–ª–∞–≥–∏–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ WP
	 */
	protected $plugin_name;


	/**
	 * –í–µ—Ä—Å–∏—è –ø–ª–∞–≥–∏–Ω–∞
	 *
	 * @since    1.0.0
	 * @access   private
	 * @var      string    $version    –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –ø–ª–∞–≥–∏–Ω–∞
	 */
	protected $version;


	/**
	 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞.
	 *
	 * @since    1.0.0
	 * @param    string    $plugin_name       –ò–º—è –ø–ª–∞–≥–∏–Ω –∏ —Å–ª–∞–≥ –º–µ—Ç–∞–ø–æ–ª–µ–π
	 * @param    string    $version           –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è
	 * @param    string    $plugin_name       –ò–º—è –ø–ª–∞–≥–∏–Ω –∏ —Å–ª–∞–≥ –º–µ—Ç–∞–ø–æ–ª–µ–π
	 * @param    string    $version           –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è
	 */
	public function __construct( $plugin_name, $version ) {
		$this->plugin_name = $plugin_name;
		$this->version = $version;
	}


	/**
	 * –§–æ—Ä–º–∏—Ä—É–µ—Ç html-–∫–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
	 * @param  string $value "–∑–Ω–∞—á–µ–Ω–∏–µ" –ø–æ–ª—è
	 * @param  array  $atts  –∞—Ç—Ä–∏–±—É—Ç—ã —Ç–µ–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
	 * @return string        html-–∫–æ–¥
	 */
	public static function render_textarea( $value = '', $atts = [] ) {
		return '<textarea ' . self::render_atts( $atts ) . ' >' . $value . '</textarea>';
	}


	/**
	 * –§–æ—Ä–º–∏—Ä—É–µ—Ç html-–∫–æ–¥ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
	 * @param  array  $choices           –≤—ã—Ä–∏–Ω–∞—Ç—ã –≤—ã–±–æ—Ä–∞ –∫–ª—é—á=>–Ω–∞–∑–≤–∞–Ω–∏–µ
	 * @param  array  $selected          –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
	 * @param  array  $atts              –∞—Ç—Ç—Ä–∏–±—É—Ç—ã –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
	 * @param  string $show_option_none  —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ –ø—É—Å—Ç–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
	 * @param  string $option_none_value –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
	 * @return string                    html-–∫–æ–¥ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
	 */
	public static function render_dropdown( $choices = [], $selected = [], $atts = [], $show_option_none = '-', $option_none_value = '' ) {
		$html = '';
		if ( is_array( $choices ) && ! empty( $choices ) ) {
			if ( ! is_array( $selected ) ) {
				$selected = [ $selected ];
			}
			$atts = array_merge( [
				'data-selected' => ( empty( $selected ) ) ? '[]' : wp_json_encode( $selected ),
			], $atts );
			$html .= '<select ' . self::render_atts( $atts ) . ' >';
			if ( $show_option_none ) {
				$html .= sprintf( '<option value="%1$s">%2$s</option>', esc_attr( $option_none_value ), $show_option_none );
			}
			foreach ( $choices as $value => $label ) {
				$html .= sprintf( '<option value="%1$s" %2$s>%3$s</option>', $value, selected( true, in_array( $value, $selected ), false ), $label );
			}
			$html .= '</select>';
		}
		return $html;
	}


	public static function render_checkbox_group( $name, $choices = [], $checked = [] ) {
		$html = '';
		if ( ! is_array( $checked ) ) {
			$checked = [ $checked ];
		}
		foreach ( $choices as $current => $label ) {
			$atts = [
				'name'    => $name . '[]',
				'value'   => $current,
			];
			if ( in_array( $current, $checked ) ) {
				$atts[ 'checked' ] = 'checked';
			}
			$html .= '<li><label class="checkbox">' . self::render_input( 'checkbox', $atts ) . ' ' . $label . '</label></li>';
		}
		return ( empty( $html ) ) ? '' : '<ul class="list-inline">' . $html . '</ul>';
	}


	public static function render_radio_group( $name, $choices = [], $checked = [] ) {
		$html = '';
		if ( ! is_array( $checked ) ) {
			$checked = [ $checked ];
		}
		foreach ( $choices as $current => $label ) {
			$atts = [
				'name'    => $name,
				'value'   => $current,
				'checked' => in_array( $current, $checked ),
			];
			$html .= '<label class="radio">' . self::render_input( 'radio', $atts ) . ' ' . $label . '</label>';
		}
		return $html;
	}


	/**
	 * –§–æ—Ä–º–∏—Ä—É–µ—Ç html-–∫–æ–¥ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ñ–æ—Ä–º—ã
	 * @param  string $type —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ —Ñ–æ—Ä–º—ã
	 * @param  array  $atts –∞—Ç—Ç—Ä–∏–±—É—Ç—ã —Ç–µ–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ñ–æ—Ä–º—ã
	 * @return string       html-–∫–æ–¥
	 */
	public static function render_input( $type = 'text', $atts = [] ) {
		return '<input type="' . $type . '" ' . self::render_atts( $atts ) . ' >';
	}


	/**
	 * –§–æ—Ä–º–∏—Ä—É–µ—Ç html-–∫–æ–¥ "—Å–±–æ—Ä–Ω–æ–≥–æ –ø–æ–ª—è"
	 * @param  string $plugin_name –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞–≥–∏–Ω–∞
	 * @param  string $version     –≤–µ—Ä—Å–∏—è –ø–ª–∞–≥–∏–Ω–∞
	 * @param  array  $controls    –º–∞—Å—Å–∏–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö —Ñ–æ—Ä–º—ã
	 * @param  array  $atts        –º–∞—Å—Å–∏–≤ –æ—Ç—Ç—Ä–∏–±—É—Ç–æ–≤
	 * @return string              html-–∫–æ–¥
	 */
	public static function render_composite( $plugin_name, $version, $controls = [], $atts = [] ) {
		$result = [];
		foreach ( $controls as $control ) {
			$control = array_merge( [
				'type' => '',
				'args' => [],
			], $control );
			$result[] = self::create_control( $plugin_name, $version, $control[ 'type' ], $control[ 'args' ] );
		}
		if ( ! array_key_exists( 'class', $atts ) ) {
			$atts[ 'class' ] = '';
		}
		$atts[ 'class' ] .= ' composite-field';
		return ( empty( $result ) ) ? '' : '<div ' . self::render_atts( $atts ) . ' >' . implode( "\r\n", $result ) . '</div>';
	}


	/**
	 * –§–æ—Ä–º–∏—Ä—É–µ—Ç html-–∫–æ–¥ –≥–∞–ª–µ—Ä–µ–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
	 * @param  string $plugin_name –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞–≥–∏–Ω–∞
	 * @param  string $version     –≤–µ—Ä—Å–∏—è –ø–ª–∞–≥–∏–Ω–∞
	 * @param  string $template    —à–∞–±–ª–æ–Ω –¥–ª—è –≤—ã–æ–¥–∞ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
	 * @param  string $name        –æ–±—â–µ–µ –∏–º—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
	 * @param  array  $value       –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
	 * @param  array  $atts        –º–∞—Å—Å–∏–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞—Ç—Ä–∏—É—Ç–æ–≤ —Ç–µ–≥–∞ –¥–ª—è –æ–±—ë—Ä—Ç–∫–∏
	 * @return string              html-–∫–æ–¥
	 */
	public static function render_image_gallery( $plugin_name, $version, $name, $value = [], $atts = [] ) {
		wp_enqueue_media();
		add_thickbox();
		$html = '';
		if ( ! is_array( $value ) ) {
			$value = wp_parse_list( $value );
		}
		$value = array_filter( array_map( function ( $attachment_id ) {
			$thumbnauil_url = wp_get_attachment_image_url( $attachment_id, 'thumbnail', false );
			$full_url = wp_get_attachment_image_url( $attachment_id, 'full', false );
			return ( $thumbnauil_url && $full_url ) ? [
				'id'   => $attachment_id,
				'url'  => $thumbnauil_url,
				'full' => $full_url,
			] : null;
		}, $value ) );
		if ( empty( $value ) ) {
			$data = '[]';
		} else {
			$data = wp_json_encode( $value );
		}
		ob_start();
		?>
			<div class="image-gallery" data-image-gallery="<?php echo $name; ?>" >
				<script type="text/javascript">
					var <?php echo $name; ?>_data = <?php echo $data; ?>;
				</script>
				<div class="images"></div>
				<button  class="button button-primary add-button" type="button">
					<?php _e( '–í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', $plugin_name ); ?>
				</button>
				<script type="text/html" id="tmpl-<?php echo $name; ?>">
					<div class="gallery-item" data-image-id="{{data.id}}">
						<input type="hidden" name="<?php echo $name; ?>[]" value="{{data.id}}">
						<img src="{{data.url}}">
						<a type="button" class="thickbox" href="#TB_inline?&width=600&inlineId=full-image-{{data.id}}">üîé</a>
						<div id="full-image-{{data.id}}" style="display: none;">
							<img class="image-gallery-full-size" src="{{data.full}}">
						</div>
						<button type="button" title="<?php esc_attr_e( '–£–¥–∞–ª–∏—Ç—å', $plugin_name ); ?>" class="button remove-button">&times;</button>
					</div>
				</script>
			</div>
		<?
		$html .= ob_get_contents();
		ob_end_clean();
		return $html;
	}


	/**
	 * –§–æ—Ä–º–∏—Ä—É–µ—Ç html-–∫–æ–¥ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã
	 * @param  string $plugin_name –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞–≥–∏–Ω–∞
	 * @param  string $version     –≤–µ—Ä—Å–∏—è –ø–ª–∞–≥–∏–Ω–∞
	 * @param  string $template    —à–∞–±–ª–æ–Ω –¥–ª—è –≤—ã–æ–¥–∞ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
	 * @param  string $name        –æ–±—â–µ–µ –∏–º—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
	 * @param  array  $value       –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
	 * @param  array  $atts        –º–∞—Å—Å–∏–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞—Ç—Ä–∏—É—Ç–æ–≤ —Ç–µ–≥–∞ –¥–ª—è –æ–±—ë—Ä—Ç–∫–∏
	 * @return string              html-–∫–æ–¥
	 */
	public static function render_list( $plugin_name, $version, $template, $name, $value = [], $atts = [] ) {
		$html = '';
		if ( ! is_array( $value ) ) {
			$value = wp_parse_list( $value );
		}
		if ( empty( $value ) ) {
			$data = '[]';
		} else {
			$data = wp_json_encode( array_map( function ( $item ) {
				return array( 'value' => $item );
			}, $value ) );
		}
		if ( ! empty( trim( $template ) ) ) {;
			ob_start();
			?>
				<div class="list-of-templates" data-list-of-templates="<?php echo $name; ?>" >
					<script type="text/javascript">
						var <?php echo $name; ?>_data = <?php echo $data; ?>;
					</script>
					<div class="list"></div>
					<button  class="button button-primary add-button" type="button">
						<?php _e( '–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É', $plugin_name ); ?>
					</button>
					<script type="text/html" id="tmpl-<?php echo $name; ?>">
						<div class="list-item">
							<div class="template">
								<?php echo $template; ?>	
							</div>
							<button type="button" title="<?php esc_attr_e( '–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É', $plugin_name ); ?>" class="button remove-button">
								&times;
							</button>
						</div>
					</script>
				</div>
			<?
			$html .= ob_get_contents();
			ob_end_clean();
		}
		return $html;
	}


	/**
	 * –û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã
	 * @param  string $plugin_name –∏–¥–µ–≥—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞–≥–∏–Ω–∞
	 * @param  string $version     –≤–µ—Ä—Å–∏—è –ø–ª–∞–≥–∏–Ω–∞
	 * @param  string $type        —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ —Ñ–æ—Ä–º—ã
	 * @param  array  $args        –º–∞—Å—Å–∏–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–∞
	 * @return string              html-–∫–æ–¥
	 */
	public static function create_control( $plugin_name, $version, $type = '', $args = [] ) {
		$result = '';
		switch ( $type ) {

			case 'gallery':
				$result = self::render_image_gallery( $plugin_name, $version, $args[ 'name' ], $args[ 'value' ], $args[ 'atts' ] );
				break;
			
			case 'list':
				$args = array_merge( [
					'template' => '',
					'name'     => 'list',
					'value'    => [],
					'atts'     => [],
				], $args );
				$result = self::render_list( $plugin_name, $version, $args[ 'template' ], $args[ 'name' ], $args[ 'value' ], $args[ 'atts' ] );
				break;

			case 'dropdown':
				$args = array_merge( [
					'atts'     => [],
					'choices'  => [],
					'selected' => [],
					'show_option_none' => '-',
					'option_none_value' => '',
				], $args );
				$result = self::render_dropdown( $args[ 'choices' ], $args[ 'selected' ], $args[ 'atts' ], $args[ 'show_option_none' ], $args[ 'option_none_value' ] );
				break;

			case 'composite':
				$args = array_merge( [
					'atts'     => [],
					'controls' => [],
				], $args );
				$result = self::render_composite( $plugin_name, $version, $args[ 'controls' ], $args[ 'atts' ] );
				break;

			case 'textarea':
				$args = array_merge( [
					'atts'  => [],
					'value' => '',
				], $args );
				$result = self::render_textarea( $args[ 'value' ], $args[ 'atts' ] );
				break;

			case 'checkbox':
			case 'radio':
			case 'text':
			case 'number':
			case 'email':
			case 'password':
			case 'hidden':
			case 'date':
			case 'text':
			default:
				$args = array_merge( [
					'atts' => [],
				], $args );
				$result = self::render_input( $type, $args[ 'atts' ] );
				break;

		}

		return $result;

	}


	/**
	 * –§–æ—Ä–º–∏—Ä—É–µ—Ç html –∫–æ–¥ –∞—Ç—Ç—Ä–∏–±—É—Ç–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
	 * @param  array  $atts  –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∏–≤ –∞—Ç—Ç—Ä–∏–±—É—Ç=>–∑–Ω–∞—á–µ–Ω–∏–µ
	 * @return string        html-–∫–æ–¥
	 */
	public static function render_atts( $atts ) {
		$html = '';
		if ( ! empty( $atts ) ) {
			foreach ( $atts as $key => $value ) {
				$html .= ' ' . $key . '="' . $value . '"';
			}
		}
		return $html;
	}


	/**
	 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –º–∞—Å—Å–∏–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	 * @param  array $default           —Ä–∞—Å–∑–µ—Ä—ë–Ω–Ω—ã–µ –ø–∞—Ä–º–µ—Ç—Ä—ã –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
	 * @param  array $args              –Ω–µ–æ—á–∏—â–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	 * @param  array $sanitize_callback –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å –∏–º–µ–Ω–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏—è, —Å –ø–æ–º–æ—â—å—é –ø–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	 * @param  array $required          –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	 * @param  array $not_empty         –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏
	 * @return array                    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—â–∏—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	 */
	public static function parse_only_allowed_args( $default, $args, $sanitize_callback = [], $required = [], $not_empty = [] ) {
		$args = ( array ) $args;
		$result = [];
		$count = 0;
		while ( ( $value = current( $default ) ) !== false ) {
			$key = key( $default );
			if ( array_key_exists( $key, $args ) ) {
				$result[ $key ] = $args[ $key ];
				if ( isset( $sanitize_callback[ $count ] ) && ! empty( $sanitize_callback[ $count ] ) ) {
					$result[ $key ] = $sanitize_callback[ $count ]( $result[ $key ] );
				}
			} elseif ( in_array( $key, $required ) ) {
				return null;
			} else {
				$result[ $key ] = $value;
			}
			if ( empty( $result[ $key ] ) && in_array( $key, $not_empty ) ) {
				return null;
			}
			$count = $count + 1;
			next( $default );
		}
		return $result;
	}


	/**
	 * –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏. –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.
	 * @since    1.0.0
	 * @param    mixed     $var –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
	 */
	protected static function var_dump( $var ) {
		echo "<pre>";
		var_dump( $var );
		echo "</pre>";
	}


	/**
	 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å—Ç–∏–ª–∏ –¥–ª—è "—á–∞—Å—Ç–∏" –ø–ª–∞–≥–∏–Ω–∞
	 * @since    2.0.0
	 */
	public function admin_enqueue_styles() {
		wp_enqueue_style( "{$this->plugin_name}-control", plugin_dir_url( dirname( __FILE__ ) ) . 'admin/styles/admin-control.css', [], $this->version, 'all' );
	}


	/**
	 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è "—á–∞—Å—Ç–∏" –ø–ª–∞–≥–∏–Ω–∞
	 * @since    2.0.0
	 */
	public function admin_enqueue_scripts() {
		wp_enqueue_style( 'wp-color-picker' );
		wp_enqueue_script( 'jquery-ui-datepicker' ); 
		wp_enqueue_style( 'jquery-ui', plugin_dir_url( dirname( __FILE__ ) ) . 'admin/styles/jquery-ui.css', [], '1.11.4', 'all' );
		wp_enqueue_media();
		wp_enqueue_script( 'chomovva-admin-control', plugin_dir_url( dirname( __FILE__ ) ) . 'admin/scripts/admin-control.js',  [ 'jquery', 'wp-color-picker' ], $this->version, false );
	}


	/**
	 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Å—Å–∏–≤ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–º
	 * @param    array   $arr   –º–∞—Å—Å–∏–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	 * @return   bool           —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
	 * */
	public static function is_assoc( $arr = [] ) {
		if ( ! is_array( $arr ) ) {
			return false;
		}
		return ( count( array_filter( array_keys( $arr ),'is_string' ) ) == count( $arr ) );
	}


	/**
	 * –°–æ–±–∏—Ä–∞–µ—Ç —Å–æ —Å—Ç—Ä–æ–∫–∏ –≤–∞–ª–∏–¥–Ω—ã–µ email
	 * @param    sting|array   $emails   –Ω–µ–æ—á—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
	 * @return   string                  —Å—Ç—Ä–æ–∫–∞ —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ email
	 * */
	public static function parse_email_list( $emails = '' ) {
		return implode( ", ", array_filter( array_map( 'sanitize_email', wp_parse_list( $emails ) ) ) );
	}


}